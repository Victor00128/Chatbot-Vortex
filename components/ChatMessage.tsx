
import React from 'react';
import { Sender, ChatMessage as Message } from '../types';
import FormattedMessage from './FormattedMessage';

// --- Icon Components ---
const FileTextIcon = ({ className = "h-6 w-6 text-gray-400" }: { className?: string }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>
);

const ImageIcon = ({ className = "h-6 w-6 text-purple-400" }: { className?: string }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
    </svg>
);

const PdfIcon = ({ className = "h-6 w-6 text-red-400" }: { className?: string }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
    </svg>
);

const ZipIcon = ({ className = "h-6 w-6 text-yellow-400" }: { className?: string }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z" />
    </svg>
);

const getIconForFileType = (fileType: string): React.ReactElement => {
    if (fileType.startsWith('image/')) {
        return <ImageIcon />;
    }
    if (fileType === 'application/pdf') {
        return <PdfIcon />;
    }
    if (fileType.includes('zip')) {
        return <ZipIcon />;
    }
    if (fileType.includes('msword') || fileType.includes('officedocument.wordprocessingml.document')) {
        return <FileTextIcon className="h-6 w-6 text-blue-500" />;
    }
    return <FileTextIcon />;
};

interface ChatMessageProps {
  message: Message;
}

const ChatMessage: React.FC<ChatMessageProps> = React.memo(({ message }) => {
  const isUser = message.sender === Sender.User;

  const containerClasses = `flex w-full my-1 ${isUser ? 'justify-end' : 'justify-start'}`;
  
  const bubbleClasses = `rounded-xl px-4 py-2.5 max-w-xl shadow-md flex flex-col ${
    isUser
      ? 'bg-blue-500 text-white rounded-br-none' // Color de acento unificado
      : 'bg-zinc-800 text-gray-100 rounded-bl-none'
  }`;
  
  const speaker = isUser ? 'TÃº' : 'Bot';
  const speakerColor = isUser ? 'text-blue-200' : 'text-gray-300';

  return (
    <div className={containerClasses}>
      <div className={`${bubbleClasses} animate-message-in`}>
        <div className={`font-bold text-sm mb-1 ${speakerColor}`}>{speaker}</div>
        
        {message.fileInfo && (
           <div className="flex items-center gap-3 rounded-lg bg-black/20 p-2 my-1 border border-white/10">
              <div className="flex-shrink-0">
                {getIconForFileType(message.fileInfo.type)}
              </div>
              <div className="flex flex-col min-w-0 flex-1">
                <span className="text-sm font-medium break-all text-white">{message.fileInfo.name}</span>
                <span className="text-xs text-gray-400">{(message.fileInfo.size / 1024).toFixed(2)} KB</span>
              </div>
           </div>
        )}

        {message.text && <FormattedMessage text={message.text} />}
        
        {message.imageUrl && (
          <div className="mt-2">
            <img 
              src={`data:image/jpeg;base64,${message.imageUrl}`} 
              alt="Generated by AI" 
              className="rounded-lg w-full h-auto"
            />
          </div>
        )}
      </div>
    </div>
  );
});

export default ChatMessage;
